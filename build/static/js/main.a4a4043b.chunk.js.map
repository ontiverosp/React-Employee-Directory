{"version":3,"sources":["logo.svg","components/Row/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Row","state","employee","props","this","first","last","email","phone","dep","position","nextProps","prevState","React","Component","Table","employees","setState","data","value","tempEmployees","sort","a","b","filterTerm","target","i","allEmployees","length","toLowerCase","push","console","log","for","type","id","onChange","event","filter","onClick","map","index","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"60BAAAA,EAAOC,QAAU,IAA0B,kC,iJC4B5BC,E,4MAxBXC,MAAQ,CACJC,SAAU,EAAKC,MAAMD,U,uDASrB,IAAMA,EAAWE,KAAKH,MAAMC,SAC5B,OACI,4BACI,4BAAKA,EAASG,OACd,4BAAKH,EAASI,MACd,4BAAKJ,EAASK,OACd,4BAAKL,EAASM,OACd,4BAAKN,EAASO,KACd,4BAAKP,EAASQ,c,gDAfMC,EAAWC,GACvC,MAAO,CACNV,SAAUS,EAAUT,c,GANXW,IAAMC,WC+DTC,E,4MA9Dbd,MAAQ,CACNe,UAAW,I,kEAIXZ,KAAKa,SAAS,CAAED,UAAWE,M,2BAGxBC,GACH,IAAMC,EAAgBhB,KAAKH,MAAMe,UACjCI,EAAcC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEH,GAASI,EAAEJ,GAAU,EAAMI,EAAEJ,GAASG,EAAEH,IAAW,EAAI,KACvFf,KAAKa,SAAS,CAAED,UAAWI,M,6BAGtBD,GACL,IAAIK,EAAaL,EAAMM,OAAON,MAC9B,GAAmB,KAAfK,EAAJ,CAIA,IAAIE,EAAI,EACFC,EAAeT,EACfE,EAAgB,GACtB,IAAIM,EAAE,EAAEA,EAAEC,EAAaC,OAAOF,IACxBC,EAAaD,GAAGrB,MAAMwB,gBAAkBL,EAAWK,eACrDT,EAAcU,KAAKH,EAAaD,IAGpCK,QAAQC,IAAIZ,GACZhB,KAAKa,SAAS,CAAED,UAAWI,SAZzBhB,KAAKa,SAAS,CAACD,UAAWE,M,+BAepB,IAAD,OACDA,EAAOd,KAAKH,MAAMe,UACxB,OACE,6BACE,8BACE,2BAAOiB,IAAI,UAAX,eACA,2BAAOC,KAAK,OAAOC,GAAG,SAASC,SAAU,SAACC,GAAD,OAAW,EAAKC,OAAOD,OAEhE,+BACE,+BACE,4BACE,wBAAIE,QAAS,kBAAM,EAAKlB,KAAK,WAA7B,SACA,wBAAIkB,QAAS,kBAAM,EAAKlB,KAAK,UAA7B,QACA,wBAAIkB,QAAS,kBAAM,EAAKlB,KAAK,WAA7B,SACA,wBAAIkB,QAAS,kBAAM,EAAKlB,KAAK,WAA7B,SACA,wBAAIkB,QAAS,kBAAM,EAAKlB,KAAK,SAA7B,OACA,wBAAIkB,QAAS,kBAAM,EAAKlB,KAAK,cAA7B,cAGJ,+BACGH,EAAKsB,KAAI,SAACxB,EAAWyB,GAAZ,OACR,kBAAC,EAAD,CAAKC,IAAKD,EAAOvC,SAAUc,c,GAtDvBH,IAAMC,WCYX6B,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.a4a4043b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n\r\nclass Row extends React.Component {\r\n    state = {\r\n        employee: this.props.employee\r\n    };\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        return {\r\n         employee: nextProps.employee,\r\n        };\r\n       }\r\n\r\n    render() {\r\n        const employee = this.state.employee\r\n        return (\r\n            <tr>\r\n                <td>{employee.first}</td>\r\n                <td>{employee.last}</td>\r\n                <td>{employee.email}</td>\r\n                <td>{employee.phone}</td>\r\n                <td>{employee.dep}</td>\r\n                <td>{employee.position}</td>\r\n            </tr>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\nimport data from \"../../db/data.json\"\nimport Row from \"../Row\"\nclass Table extends React.Component {\n  state = {\n    employees: []\n  }\n\n  componentDidMount() {\n    this.setState({ employees: data })\n  }\n\n  sort(value) {\n    const tempEmployees = this.state.employees\n    tempEmployees.sort((a, b) => (a[value] > b[value]) ? 1 : ((b[value] > a[value]) ? -1 : 0));\n    this.setState({ employees: tempEmployees })\n  }\n\n  filter(value) {\n    let filterTerm = value.target.value;\n    if (filterTerm === ''){\n      this.setState({employees: data});\n      return ;\n    }\n    let i = 0;\n    const allEmployees = data;\n    const tempEmployees = [];\n    for(i=0;i<allEmployees.length;i++){\n      if (allEmployees[i].first.toLowerCase() === filterTerm.toLowerCase()){\n        tempEmployees.push(allEmployees[i])\n      }\n    }\n    console.log(tempEmployees)\n    this.setState({ employees: tempEmployees })\n  }\n\n  render() {\n    const data = this.state.employees;\n    return (\n      <div>\n        <form>\n          <label for=\"search\">First name:</label>\n          <input type=\"text\" id=\"search\" onChange={(event) => this.filter(event)}></input>\n        </form>\n          <table>\n            <thead>\n              <tr>\n                <th onClick={() => this.sort('first')}>First</th>\n                <th onClick={() => this.sort('last')}>Last</th>\n                <th onClick={() => this.sort('email')}>Email</th>\n                <th onClick={() => this.sort('phone')}>Phone</th>\n                <th onClick={() => this.sort('dep')}>Dep</th>\n                <th onClick={() => this.sort('position')}>Position</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((employees, index) => (\n                <Row key={index} employee={employees} />\n              ))}\n            </tbody>\n          </table>\n      </div>\n    )\n  };\n}\n\nexport default Table;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Table/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}